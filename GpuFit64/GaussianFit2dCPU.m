function [fitresult, gof] = GaussianFit2dCPU(fit_img)
%GaussianFit2dCPU(X,Y,FIT_IMG)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : X
%      Y Input : Y
%      Z Output: fit_img
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 04-Sep-2017 18:36:03


%% Fit: 'untitled fit 1'.
fit_img_size = size(fit_img);
x = 1:fit_img_size(2);
y = 1:fit_img_size(1);
[X,Y] = meshgrid(x,y);
[xData, yData, zData] = prepareSurfaceData( X, Y, fit_img );

% Set up fittype and options.
ft = fittype( 'z0 + amp*exp(-(x-x0).^2/(2*sigmax^2)-(y-y0).^2/(2*sigmay^2))', 'independent', {'x', 'y'}, 'dependent', 'z' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Algorithm = 'Levenberg-Marquardt';
opts.Display = 'Off';
max_value = max(fit_img(:));
min_value = min(fit_img(:));
[y0,x0] = find(max_value == fit_img);

% opts.StartPoint = [amp_int sdx_int sdy_int x0_int y0_int min(z(:))];
opts.StartPoint = [max_value 1 1 x0 y0 min_value];

% Fit model to data.

[fitresult, gof] = fit( [xData, yData], zData, ft, opts );

% Plot fit with data.
figure( 'Name', 'untitled fit 1' );
h = plot( fitresult, [xData, yData], zData );
legend( h, 'untitled fit 1', 'fit_img vs. X, Y', 'Location', 'NorthEast' );
% Label axes
xlabel X
ylabel Y
zlabel fit_img
grid on
view( 175.0, 14.0 );


